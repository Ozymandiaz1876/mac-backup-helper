#!/bin/bash

# Mac Transfer Utility - Restore Script
# This script restores your Mac configuration from backup
# Generated by Mac Transfer Utility

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
show_banner() {
    echo -e "${PURPLE}"
    echo "╔═══════════════════════════════════════╗"
    echo "║        Mac Transfer Utility          ║"
    echo "║         Restore Script                ║"
    echo "╚═══════════════════════════════════════╝"
    echo -e "${NC}"
}

# Logging functions
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] ✓ $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] ⚠ $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ✗ $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] ℹ $1${NC}"
}

step() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')] → $1${NC}"
}

# Progress bar
show_progress() {
    local current=$1
    local total=$2
    local desc=$3
    local percent=$((current * 100 / total))
    local bar_length=30
    local filled_length=$((bar_length * current / total))
    
    printf "\r${BLUE}Progress: ["
    printf "%*s" $filled_length | tr ' ' '='
    printf "%*s" $((bar_length - filled_length)) | tr ' ' '-'
    printf "] %d%% - %s${NC}" $percent "$desc"
    
    if [ $current -eq $total ]; then
        echo
    fi
}

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR="$(dirname "$SCRIPT_DIR")"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Homebrew if not present
install_homebrew() {
    if ! command_exists brew; then
        step "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ $(uname -m) == "arm64" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        log "Homebrew installed successfully"
    else
        log "Homebrew already installed"
    fi
}

# Function to restore Homebrew packages
restore_homebrew_packages() {
    if [[ -f "$BACKUP_DIR/apps/homebrew-formulae.txt" ]] && [[ -s "$BACKUP_DIR/apps/homebrew-formulae.txt" ]]; then
        step "Installing Homebrew formulae..."
        local count=0
        while IFS= read -r formula; do
            if [[ -n "$formula" ]]; then
                info "Installing: $formula"
                brew install "$formula" || warn "Failed to install $formula"
                ((count++))
            fi
        done < "$BACKUP_DIR/apps/homebrew-formulae.txt"
        log "Processed $count Homebrew formulae"
    fi

    if [[ -f "$BACKUP_DIR/apps/homebrew-casks.txt" ]] && [[ -s "$BACKUP_DIR/apps/homebrew-casks.txt" ]]; then
        step "Installing Homebrew casks..."
        local count=0
        while IFS= read -r cask; do
            if [[ -n "$cask" ]]; then
                info "Installing: $cask"
                brew install --cask "$cask" || warn "Failed to install $cask"
                ((count++))
            fi
        done < "$BACKUP_DIR/apps/homebrew-casks.txt"
        log "Processed $count Homebrew casks"
    fi
}

# Function to restore shell configuration
restore_shell_config() {
    step "Restoring shell configuration..."
    
    # Backup existing files
    for file in .zshrc .zprofile .bash_profile .profile .p10k.zsh; do
        if [[ -f "$HOME/$file" ]]; then
            cp "$HOME/$file" "$HOME/${file}.backup.$(date +%Y%m%d_%H%M%S)"
            log "Backed up existing $file"
        fi
    done
    
    # Restore configuration files
    if [[ -d "$BACKUP_DIR/config" ]]; then
        local restored_count=0
        for file in "$BACKUP_DIR/config"/*; do
            if [[ -f "$file" ]] && [[ ! "$file" == *"/.antigen"* ]] && [[ ! "$file" == *"/.oh-my-zsh"* ]]; then
                filename=$(basename "$file")
                cp "$file" "$HOME/$filename"
                log "Restored $filename"
                ((restored_count++))
            fi
        done
        
        # Restore Antigen configuration
        if [[ -d "$BACKUP_DIR/config/.antigen" ]]; then
            cp -r "$BACKUP_DIR/config/.antigen" "$HOME/"
            log "Restored Antigen configuration"
            ((restored_count++))
        fi
        
        # Restore Oh My Zsh custom configuration
        if [[ -d "$BACKUP_DIR/config/.oh-my-zsh" ]]; then
            mkdir -p "$HOME/.oh-my-zsh"
            cp -r "$BACKUP_DIR/config/.oh-my-zsh"/* "$HOME/.oh-my-zsh/"
            log "Restored Oh My Zsh custom configuration"
            ((restored_count++))
        fi
        
        log "Shell configuration restored ($restored_count items)"
    fi
}

# Function to install shell enhancements
install_shell_enhancements() {
    step "Installing shell enhancements..."
    
    # Install Powerlevel10k if p10k config exists
    if [[ -f "$BACKUP_DIR/config/.p10k.zsh" ]]; then
        if [[ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k" ]] && [[ ! -d "$HOME/powerlevel10k" ]]; then
            git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
            log "Installed Powerlevel10k"
        fi
    fi
    
    # Install Antigen if configuration exists
    if [[ -d "$BACKUP_DIR/config/.antigen" ]] && [[ ! -f "$HOME/antigen.zsh" ]]; then
        curl -L git.io/antigen > ~/antigen.zsh
        log "Installed Antigen"
    fi
    
    # Install Oh My Zsh if custom config exists but oh-my-zsh doesn't
    if [[ -d "$BACKUP_DIR/config/.oh-my-zsh" ]] && [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        log "Installed Oh My Zsh"
    fi
}

# Function to restore system configurations
restore_system_config() {
    step "Restoring system configurations..."
    local restored_count=0
    
    # Restore SSH configuration (with permission handling)
    if [[ -d "$BACKUP_DIR/system/ssh-backup" ]]; then
        mkdir -p ~/.ssh
        cp -r "$BACKUP_DIR/system/ssh-backup"/* ~/.ssh/ 2>/dev/null || true
        chmod 700 ~/.ssh
        find ~/.ssh -type f -exec chmod 600 {} \; 2>/dev/null || true
        log "SSH configuration restored (check permissions)"
        ((restored_count++))
    fi
    
    # Restore Git configuration
    if [[ -f "$BACKUP_DIR/system/.gitconfig" ]]; then
        cp "$BACKUP_DIR/system/.gitconfig" ~/.gitconfig
        log "Git configuration restored"
        ((restored_count++))
    fi
    
    # Restore other configurations
    for config_file in .vimrc .tmux.conf .screenrc .inputrc; do
        if [[ -f "$BACKUP_DIR/system/$config_file" ]]; then
            cp "$BACKUP_DIR/system/$config_file" "$HOME/"
            log "Restored $config_file"
            ((restored_count++))
        fi
    done
    
    # Restore application-specific configurations
    for backup_dir in "$BACKUP_DIR/system"/*-backup; do
        if [[ -d "$backup_dir" ]]; then
            dir_name=$(basename "$backup_dir" -backup)
            target_dir="$HOME/.$dir_name"
            cp -r "$backup_dir" "$target_dir"
            log "Restored $dir_name configuration"
            ((restored_count++))
        fi
    done
    
    log "System configurations restored ($restored_count items)"
}

# Function to restore scripts
restore_scripts() {
    step "Restoring custom scripts..."
    local restored_count=0
    
    # Restore user bin directories
    for script_dir in "$BACKUP_DIR/scripts/bin" "$BACKUP_DIR/scripts/.local"; do
        if [[ -d "$script_dir" ]]; then
            dir_name=$(basename "$script_dir")
            if [[ "$dir_name" == "bin" ]]; then
                target_dir="$HOME/bin"
            else
                target_dir="$HOME/.local/bin"
            fi
            
            mkdir -p "$target_dir"
            cp -r "$script_dir"/* "$target_dir/" 2>/dev/null || true
            find "$target_dir" -type f -exec chmod +x {} \; 2>/dev/null || true
            log "Restored scripts to $target_dir"
            ((restored_count++))
        fi
    done
    
    log "Custom scripts restored ($restored_count directories)"
}

# Function to install npm packages
restore_npm_packages() {
    if [[ -f "$BACKUP_DIR/apps/npm-global.txt" ]] && command_exists npm; then
        step "Installing global npm packages..."
        local count=0
        # Extract package names from npm list output
        grep -E "^├── |^└── " "$BACKUP_DIR/apps/npm-global.txt" | \
        sed -E 's/^[├└]── ([^@]+)@.*/\1/' | \
        while IFS= read -r package; do
            if [[ -n "$package" ]] && [[ "$package" != "npm" ]]; then
                info "Installing npm package: $package"
                npm install -g "$package" || warn "Failed to install npm package: $package"
                ((count++))
            fi
        done
        log "npm packages installation completed"
    fi
}

# Function to install pip packages
restore_pip_packages() {
    if [[ -f "$BACKUP_DIR/apps/pip-packages.txt" ]]; then
        if command_exists pip; then
            step "Installing pip packages..."
            pip install -r "$BACKUP_DIR/apps/pip-packages.txt" || warn "Some pip packages failed to install"
        elif command_exists pip3; then
            step "Installing pip packages with pip3..."
            pip3 install -r "$BACKUP_DIR/apps/pip-packages.txt" || warn "Some pip packages failed to install"
        else
            warn "Neither pip nor pip3 found - skipping Python packages"
        fi
    fi
}

# Function to install Mac App Store applications
install_mas_apps() {
    if [[ -f "$BACKUP_DIR/apps/mac-app-store.txt" ]] && [[ -s "$BACKUP_DIR/apps/mac-app-store.txt" ]]; then
        if ! command_exists mas; then
            step "Installing mas (Mac App Store CLI)..."
            brew install mas
        fi
        
        step "Installing Mac App Store applications..."
        warn "You may need to sign in to the App Store first: mas signin"
        
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                app_id=$(echo "$line" | cut -d' ' -f1)
                app_name=$(echo "$line" | cut -d' ' -f2-)
                info "Installing: $app_name (ID: $app_id)"
                mas install "$app_id" || warn "Failed to install $app_name"
            fi
        done < "$BACKUP_DIR/apps/mac-app-store.txt"
    fi
}

# Function to set up development tools
setup_dev_tools() {
    step "Setting up development tools..."
    
    # Install Xcode Command Line Tools if not present
    if ! xcode-select -p &>/dev/null; then
        step "Installing Xcode Command Line Tools..."
        xcode-select --install
        warn "Please complete the Xcode Command Line Tools installation and re-run this script"
        read -p "Press Enter after installing Xcode Command Line Tools..."
    fi
    
    # Install common development tools if not already installed
    local dev_tools=("git" "curl" "wget" "jq" "tree" "htop")
    for tool in "${dev_tools[@]}"; do
        if ! command_exists "$tool"; then
            brew install "$tool" || warn "Failed to install $tool"
        fi
    done
}

# Function to apply macOS preferences (basic ones)
apply_macos_preferences() {
    step "Applying basic macOS preferences..."
    
    # Basic Finder preferences
    defaults write com.apple.finder ShowPathbar -bool true
    defaults write com.apple.finder ShowStatusBar -bool true
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    
    # Screenshot location
    defaults write com.apple.screencapture location -string "$HOME/Desktop"
    
    # Dock preferences
    defaults write com.apple.dock autohide -bool true
    defaults write com.apple.dock show-recents -bool false
    
    # Apply changes
    killall Dock 2>/dev/null || true
    killall Finder 2>/dev/null || true
    
    log "Basic macOS preferences applied"
}

# Function to create post-installation checklist
create_checklist() {
    cat > "$HOME/mac-migration-checklist.txt" << EOF
Mac Migration Post-Installation Checklist
==========================================
Completed on: $(date)

MANUAL STEPS REQUIRED:
□ Sign in to Apple ID / iCloud
□ Sign in to Mac App Store (run 'mas signin' for CLI access)
□ Configure Touch ID / Face ID
□ Set up Time Machine backup
□ Configure printers and scanners
□ Verify SSH keys work correctly
□ Test Git configuration with a repository
□ Configure VPN connections
□ Set up email accounts
□ Restore browser bookmarks and extensions
□ Configure notification preferences
□ Set up Focus modes
□ Restore Keychain items

DEVELOPMENT ENVIRONMENT:
□ Test terminal configuration: source ~/.zshrc
□ Verify all development tools work
□ Clone important repositories
□ Set up IDE/editor preferences
□ Configure database connections
□ Test build environments

FILES RESTORED:
- Shell configurations: $(find "$BACKUP_DIR/config" -type f 2>/dev/null | wc -l) files
- Applications: see $BACKUP_DIR/apps/
- Scripts: $(find "$BACKUP_DIR/scripts" -type f 2>/dev/null | wc -l) files
- System configs: $(find "$BACKUP_DIR/system" -type f 2>/dev/null | wc -l) files

SECURITY REMINDERS:
- Review SSH key permissions and functionality
- Update any hardcoded paths in scripts
- Verify cloud service authentications
- Consider rotating sensitive credentials

For issues, check the backup directory at: $BACKUP_DIR
EOF
    
    log "Post-installation checklist created at ~/mac-migration-checklist.txt"
}

# Main restoration process
main() {
    show_banner
    
    info "Starting Mac migration restoration..."
    info "Backup directory: $BACKUP_DIR"
    
    # Check if backup directory exists
    if [[ ! -d "$BACKUP_DIR" ]]; then
        error "Backup directory not found: $BACKUP_DIR"
        exit 1
    fi
    
    # Display backup information
    if [[ -f "$BACKUP_DIR/system-info.txt" ]]; then
        echo -e "${BLUE}"
        echo "Backup Information:"
        cat "$BACKUP_DIR/system-info.txt" | head -5
        echo -e "${NC}"
    fi
    
    # Ask for confirmation
    echo -e "${YELLOW}This will restore your Mac configuration from the backup."
    echo -e "Continue? [y/N]:${NC} "
    read -r confirmation
    
    if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
        log "Restoration cancelled by user"
        exit 0
    fi
    
    # Execute restoration steps with progress
    local total_steps=10
    local current_step=0
    
    show_progress $((++current_step)) $total_steps "Development tools"
    setup_dev_tools
    
    show_progress $((++current_step)) $total_steps "Homebrew"
    install_homebrew
    
    show_progress $((++current_step)) $total_steps "Shell enhancements"
    install_shell_enhancements
    
    show_progress $((++current_step)) $total_steps "Shell configuration"
    restore_shell_config
    
    show_progress $((++current_step)) $total_steps "System configuration"
    restore_system_config
    
    show_progress $((++current_step)) $total_steps "Custom scripts"
    restore_scripts
    
    show_progress $((++current_step)) $total_steps "Homebrew packages"
    restore_homebrew_packages
    
    show_progress $((++current_step)) $total_steps "npm packages"
    restore_npm_packages
    
    show_progress $((++current_step)) $total_steps "Python packages"
    restore_pip_packages
    
    show_progress $((++current_step)) $total_steps "macOS preferences"
    apply_macos_preferences
    
    echo
    log "Core restoration completed successfully!"
    
    # Create checklist
    create_checklist
    
    echo
    echo -e "${GREEN}╔═══════════════════════════════════════╗"
    echo -e "║        Restoration Complete!          ║"
    echo -e "╚═══════════════════════════════════════╝${NC}"
    echo
    info "Your Mac environment has been restored! 🎉"
    info "Review the checklist: ~/mac-migration-checklist.txt"
    warn "Restart your terminal or run 'source ~/.zshrc' to apply shell changes"
    warn "Some applications may require manual installation and configuration"
    
    # Optional: Install Mac App Store apps
    echo
    read -p "$(echo -e ${YELLOW}Install Mac App Store apps now? [y/N]:${NC} )" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        install_mas_apps
    else
        info "Skipped Mac App Store apps - install manually or run 'mas install <app_id>'"
    fi
    
    echo
    log "Migration restoration completed! Welcome to your new Mac! 🚀"
}

# Check if running on macOS
if [[ "$(uname)" != "Darwin" ]]; then
    error "This restore script is designed for macOS only"
    exit 1
fi

# Run main function
main "$@"